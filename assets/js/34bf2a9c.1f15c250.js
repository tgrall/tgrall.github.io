"use strict";(self.webpackChunktgrall_blog=self.webpackChunktgrall_blog||[]).push([[34393],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>h});var t=n(67294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||i;return n?t.createElement(m,o(o({ref:a},d),{},{components:n})):t.createElement(m,o({ref:a},d))}));function h(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},30851:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(87462),r=(n(67294),n(3905));const i={title:"Quarkus: Database Projection with Panache",description:"Learn how to use Database Projection with Panache.",tags:["quarkus","panache","java","orm","learning quarkus"],keywords:["quarkus","panache","java","orm"]},o=void 0,l={permalink:"/blog/2023/12/16/quarkus-database-projection-with-panache",editUrl:"https://github.dev/tgrall/tgrall.github.io/blob/main/blog/2023-12-16-quarkus-database-projection-with-panache.md",source:"@site/blog/2023-12-16-quarkus-database-projection-with-panache.md",title:"Quarkus: Database Projection with Panache",description:"Learn how to use Database Projection with Panache.",date:"2023-12-16T00:00:00.000Z",formattedDate:"December 16, 2023",tags:[{label:"quarkus",permalink:"/blog/tags/quarkus"},{label:"panache",permalink:"/blog/tags/panache"},{label:"java",permalink:"/blog/tags/java"},{label:"orm",permalink:"/blog/tags/orm"},{label:"learning quarkus",permalink:"/blog/tags/learning-quarkus"}],readingTime:4.79,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Quarkus: Database Projection with Panache",description:"Learn how to use Database Projection with Panache.",tags:["quarkus","panache","java","orm","learning quarkus"],keywords:["quarkus","panache","java","orm"]},nextItem:{title:"Seamless Internationalization with GitHub Copilot",permalink:"/blog/2023/12/15/github-copilot-internationalisation"}},s={authorsImageUrls:[]},c=[{value:"Understanding the data model",id:"understanding-the-data-model",level:3},{value:"Panache Entities:",id:"panache-entities",level:4},{value:"Database Schema",id:"database-schema",level:4},{value:"Using the Panache Entities",id:"using-the-panache-entities",level:3},{value:"Testing the REST Endpoint",id:"testing-the-rest-endpoint",level:4},{value:"A quick &amp; dirty solution",id:"a-quick--dirty-solution",level:4},{value:"Efficient Data Retrieval with Database Projection:",id:"efficient-data-retrieval-with-database-projection",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:c};function p(e){let{components:a,...i}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,i,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Quarkus: Database Projection with Panache",src:n(90739).Z,width:"1200",height:"628"})),(0,r.kt)("p",null,"Welcome back to the second installment of our exploration into Quarkus and Panache! In the previous blog post, we delved into ",(0,r.kt)("a",{parentName:"p",href:"/blog/2023/12/09/quarkus-entity-default-value"},"setting default values for Panache entity fields"),". Now, as we continue refining the WindR.org website with Quarkus integration, our primary focus shifts to implementing ",(0,r.kt)("strong",{parentName:"p"},"Database Projection with Panache"),"."),(0,r.kt)("p",null,"Code Example on GitHub:"),(0,r.kt)("p",null,"To accompany this discussion, I've published the complete code example on GitHub, providing you with a hands-on reference for learning and experimentation."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/tgrall/learning-quarkus/tree/main/projection-with-panache"},"GitHub Repository: Learning Quarkus: Database Projection with Panache")),(0,r.kt)("h3",{id:"understanding-the-data-model"},"Understanding the data model"),(0,r.kt)("p",null,"For this illustrative example, we'll work with a straightforward data model consisting of two tables: 'boards' and 'brands.' The 'boards' table contains a list of windsurfing boards, while the 'brands' table serves as a reference, linked to the 'boards' table through a foreign key relationship."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Quarkus: Default Values for Panache Entity Fields",src:n(82073).Z,width:"1047",height:"430"})),(0,r.kt)("h4",{id:"panache-entities"},"Panache Entities:"),(0,r.kt)("p",null,"Let's take a closer look at the Panache entities representing these tables."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Board.java")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Entity\n@Table (\n    name = "boards"\n)\npublic class Board extends PanacheEntity {\n\n        @ManyToOne( fetch = FetchType.LAZY, optional = false)\n        @JoinColumn(name = "brand_id", nullable = false, foreignKey = @ForeignKey(name = "fk_board_brand_id"))\n        public Brand brand;\n\n        public String name;\n        public String description;\n        public String image;\n        public String program;\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Brand.java")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Entity\n@Table(\n    name = "brands"\n)\npublic class Brand extends PanacheEntity {\n\n        public String name;\n        public String description;\n        public String logo;\n        public String website;\n        public String address;\n\n}\n')),(0,r.kt)("h4",{id:"database-schema"},"Database Schema"),(0,r.kt)("p",null,"These entities are mapped to the following database tables, reflecting the relational structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table boards (\n    id bigint not null,\n    description varchar(255),\n    image varchar(255),\n    name varchar(255),\n    program varchar(255),\n    brand_id bigint not null,\n    primary key (id)\n);\n\ncreate table brands (\n    id bigint not null,\n    address varchar(255),\n    description varchar(255),\n    logo varchar(255),\n    name varchar(255),\n    website varchar(255),\n    primary key (id)\n);\n\nalter table if exists boards \n    add constraint fk_board_brand_id \n    foreign key (brand_id) \n    references brands;`\n\n")),(0,r.kt)("h3",{id:"using-the-panache-entities"},"Using the Panache Entities"),(0,r.kt)("p",null,"Now, let's create a new REST endpoint that efficiently returns the list of boards and board details, thanks to the simplicity provided by Quarkus."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"BoardResource.java")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Path("/api/v1/boards")\n@Produces(MediaType.APPLICATION_JSON)\npublic class BoardResource {\n\n    @GET\n    public List<Board> allBoards() {\n        return Board.listAll();\n    }\n\n    @GET\n    @Path("{id}")\n    public Board getBoard(Long id) {\n        return Board.findById(id);\n    }\n}\n')),(0,r.kt)("h4",{id:"testing-the-rest-endpoint"},"Testing the REST Endpoint"),(0,r.kt)("p",null,"So we can test the endpoint with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:8080/api/v1/boards/0\n")),(0,r.kt)("p",null,"that returns the following JSON:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 0,\n  "name": "Fanatic Skate",\n  "brand": {\n    "id": 0,\n    "name": "Fanatic",\n    "description": "Fanatic Description",\n    "logo": "logo.svg",\n    "website": "https://www.fanatic.com/",\n    "address": null\n  },\n  "description": "Fanatic Skate Description",\n  "image": "image.png",\n  "program": "freestyle"\n}\n')),(0,r.kt)("p",null,"As you can see the JSON contains the full details of the board and brand; and all the columns are loaded from the database, as you can see in the following SQL query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"    select\n        b1_0.id,\n        b1_0.brand_id,\n        b2_0.id,\n        b2_0.address,\n        b2_0.description,\n        b2_0.logo,\n        b2_0.name,\n        b2_0.website,\n        b1_0.description,\n        b1_0.image,\n        b1_0.name,\n        b1_0.program \n    from\n        boards b1_0 \n    join\n        brands b2_0 \n            on b2_0.id=b1_0.brand_id \n    where\n        b1_0.id=?\n")),(0,r.kt)("p",null,"So, from the client perspective, it is not very efficient because you are loading the full Brand object from the database, and you are sending all the columns to the client."),(0,r.kt)("h4",{id:"a-quick--dirty-solution"},"A quick & dirty solution"),(0,r.kt)("p",null,"Wait! Before we do that, if the reference table has a very small number of columns, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"@JsonIgnoreProperties")," annotation to exclude some columns from the Brand JSON serialization. For example, if you do not want to return the ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"logo"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"website"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," columns, you can use the following annotation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    @ManyToOne( fetch = FetchType.EAGER, optional = false)\n    @JoinColumn(name = "brand_id", nullable = false, foreignKey = @ForeignKey(name = "fk_board_brand_id"))\n    @JsonIgnoreProperties({"description", "logo", "website", "address"})\n    public Brand brand;\n')),(0,r.kt)("p",null,"Now when you call the endpoint, you will get the following JSON:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 0,\n  "name": "Fanatic Skate",\n  "brand": {\n    "id": 0,\n    "name": "Fanatic"\n  },\n  "description": "Fanatic Skate Description",\n  "image": "image.png",\n  "program": "freestyle"\n}\n')),(0,r.kt)("p",null,"So from the client perspective, it is better, but from the server-side, it is not very efficient because you are still loading the full Brand & Boards objects from the database."),(0,r.kt)("h2",{id:"efficient-data-retrieval-with-database-projection"},"Efficient Data Retrieval with Database Projection:"),(0,r.kt)("p",null,"To enhance efficiency, we introduce the concept of a projection\u2014a query returning a subset of columns from the target entity."),(0,r.kt)("p",null,"I am using Java 21, so lets create a new record named ",(0,r.kt)("inlineCode",{parentName:"p"},"BoardProjection"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'record BoardProjection(\n    Long id,\n    String name,\n    String image,\n    String program,\n    @ProjectedFieldName("brand.name") String brandName\n) { }\n')),(0,r.kt)("p",null,"The process is straightforward: specify the fields you wish to include, and when referencing a field from a related table, employ the ",(0,r.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/io.quarkus/quarkus-hibernate-orm-panache-common/latest/io/quarkus/hibernate/orm/panache/common/ProjectedFieldName.html"},(0,r.kt)("inlineCode",{parentName:"a"},"@ProjectedFieldName"))," annotation."),(0,r.kt)("p",null,"To implement this projection, utilize a ",(0,r.kt)("a",{parentName:"p",href:"https://javadoc.io/doc/io.quarkus/quarkus-hibernate-orm-panache/latest/io/quarkus/hibernate/orm/panache/PanacheQuery.html"},(0,r.kt)("inlineCode",{parentName:"a"},"PanacheQuery"))," and employ the project method to define the projection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'    @GET\n    public List<BoardProjection> allBoards() {\n        PanacheQuery<Board> boards = Board.findAll();\n        return boards.project(BoardProjection.class).list();\n    }\n\n    @GET\n    @Path("{id}")\n    public BoardProjection getBoard(Long id) {\n\n        PanacheQuery<BoardProjection> boardQuery =\n                Board.find("id", id).project(BoardProjection.class);\n        return boardQuery.firstResult();\n    }\n')),(0,r.kt)("p",null,"Pretty neat !"),(0,r.kt)("p",null,"Let's look at the API call and SQL query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:8080/api/v1/boards/0\n")),(0,r.kt)("p",null,"JSON Result"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id": 0,\n  "name": "Skate",\n  "image": "image.png",\n  "program": "freestyle",\n  "brandName": "Fanatic"\n}\n')),(0,r.kt)("p",null,"and the SQL query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"    select\n        b1_0.id,\n        b1_0.name,\n        b1_0.image,\n        b1_0.program,\n        b2_0.name \n    from\n        boards b1_0 \n    join\n        brands b2_0 \n            on b2_0.id=b1_0.brand_id \n    where\n        b1_0.id=? \n    fetch\n        first ? rows only\n\n")),(0,r.kt)("p",null,"By utilizing Panache's simple projection definition with a Java record, our API calls now retrieve only the essential data, optimizing both client and server-side performance."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this blog post, we've explored the power of Database Projection with Panache in a Quarkus environment. By efficiently selecting specific columns through a projection, we strike a balance between data completeness and performance, ensuring a streamlined experience for both developers and end-users alike."),(0,r.kt)("p",null,"Feel free to check out ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tgrall/learning-quarkus/tree/main/projection-with-panache"},"the complete code on GitHub"),", experiment with the examples, and stay tuned for more Quarkus insights in future posts!"))}p.isMDXComponent=!0},82073:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/database-model-c2db7ed0a65fe13a8ae7e40aea6d8dc4.png"},90739:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/header-42bc2166b984a752399c6dff775136d3.png"}}]);