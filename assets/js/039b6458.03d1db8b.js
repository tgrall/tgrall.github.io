"use strict";(self.webpackChunktgrall_blog=self.webpackChunktgrall_blog||[]).push([[98452],{3905:(e,t,o)=>{o.d(t,{Zo:()=>s,kt:()=>d});var n=o(67294);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var c=n.createContext({}),p=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},s=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(o),d=i,m=u["".concat(c,".").concat(d)]||u[d]||g[d]||r;return o?n.createElement(m,a(a({ref:t},s),{},{components:o})):n.createElement(m,a({ref:t},s))}));function d(e,t){var o=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=o.length,a=new Array(r);a[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<r;p++)a[p]=o[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},30028:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=o(87462),i=(o(67294),o(3905));const r={title:"Modernizing Legacy Code with GitHub Copilot: A Documentation-First Approach",description:"Learn how to use GitHub Copilot to tackle legacy code modernization through a documentation-first approach. This guide walks you through setting up instruction files, custom chat modes, and reusable prompts to automatically generate comprehensive documentation from your existing codebase\u2014creating the perfect foundation for understanding, maintaining, or rewriting legacy applications in any programming language.",tags:["coding with copilot","github","copilot","documentation","legacy"],keywords:["coding with copilot","github","copilot","documentation","legacy","progress","openedge"],image:"/images/posts/2025-10-21/header.png",date:"2025-10-21T03:12"},a=void 0,l={permalink:"/blog/2025/10/21/modernizing-legacy-code-with-github-copilot-a-documentation-first-approach",editUrl:"https://github.dev/tgrall/tgrall.github.io/blob/main/blog/2025-10-21-modernizing-legacy-code-with-github-copilot-a-documentation-first-approach.md",source:"@site/blog/2025-10-21-modernizing-legacy-code-with-github-copilot-a-documentation-first-approach.md",title:"Modernizing Legacy Code with GitHub Copilot: A Documentation-First Approach",description:"Learn how to use GitHub Copilot to tackle legacy code modernization through a documentation-first approach. This guide walks you through setting up instruction files, custom chat modes, and reusable prompts to automatically generate comprehensive documentation from your existing codebase\u2014creating the perfect foundation for understanding, maintaining, or rewriting legacy applications in any programming language.",date:"2025-10-21T03:12:00.000Z",formattedDate:"October 21, 2025",tags:[{label:"coding with copilot",permalink:"/blog/tags/coding-with-copilot"},{label:"github",permalink:"/blog/tags/github"},{label:"copilot",permalink:"/blog/tags/copilot"},{label:"documentation",permalink:"/blog/tags/documentation"},{label:"legacy",permalink:"/blog/tags/legacy"}],readingTime:3.9,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Modernizing Legacy Code with GitHub Copilot: A Documentation-First Approach",description:"Learn how to use GitHub Copilot to tackle legacy code modernization through a documentation-first approach. This guide walks you through setting up instruction files, custom chat modes, and reusable prompts to automatically generate comprehensive documentation from your existing codebase\u2014creating the perfect foundation for understanding, maintaining, or rewriting legacy applications in any programming language.",tags:["coding with copilot","github","copilot","documentation","legacy"],keywords:["coding with copilot","github","copilot","documentation","legacy","progress","openedge"],image:"/images/posts/2025-10-21/header.png",date:"2025-10-21T03:12"},prevItem:{title:"DevFest Nantes 2025: Stop Coding Like It's 2022\u2014The Agentic Era is Here",permalink:"/blog/2025/10/22/devfest-nantes-stop-coding-like-2022-agentic-era"},nextItem:{title:"Effortlessly Generate JSON Arrays from Raw Data with GitHub Copilot",permalink:"/blog/2024/03/03/github-copilot-from-raw-data-to-json-array"}},c={authorsImageUrls:[]},p=[{value:"Don&#39;t Rush to Rewrite",id:"dont-rush-to-rewrite",level:2}],s={toc:p};function g(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'A common question I hear from developers and development teams is: "Can Copilot help me with my legacy code?" Whether it\'s understanding it, maintaining it, or rewriting and modernizing the application in a new stack, the answer is absolutely yes\u2014but you need to follow the right process.'),(0,i.kt)("p",null,"You can find a video -in French- walkthrough of this approach here:"),(0,i.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/DYZNNsB-krc?si=eh_WlvAm1ErjF-KU",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0}),(0,i.kt)("h2",{id:"dont-rush-to-rewrite"},"Don't Rush to Rewrite"),(0,i.kt)("p",null,'The key mistake many make is jumping straight from legacy code (like Progress Software in my example) and asking Copilot to "write me a Java app" or "convert this to TypeScript." Instead, the proper approach is to ',(0,i.kt)("strong",{parentName:"p"},"start with documentation"),". We need to begin by creating reverse documentation from the existing code, which then serves as a solid foundation for rewriting. This ensures all functionality is well-documented and provides the right context for generating new code."),(0,i.kt)("p",null,"If you\u2019re dealing with older Java or .NET applications, the ",(0,i.kt)("a",{parentName:"p",href:"https://github.blog/changelog/2025-09-22-github-copilot-app-modernization-is-now-generally-available-for-java-and-net/"},"GitHub Copilot App Modernization")," extensions can also assist you. This article focuses on other legacy technologies, but the principle remains the same \u2014 Copilot can be a great ally for ",(0,i.kt)("strong",{parentName:"p"},"retro-documenting")," your projects."),(0,i.kt)("p",null,"You can see a complete example of this retro-documentation process applied to the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tug-on-dev/progress-sports-app/tree/main/documentation"},"Sports App"),". ",(0,i.kt)("em",{parentName:"p"},"(Originally in French then translated to English using Copilot)")))}g.isMDXComponent=!0}}]);