"use strict";(self.webpackChunktgrall_blog=self.webpackChunktgrall_blog||[]).push([[94415],{3905:function(t,e,n){n.d(e,{Zo:function(){return h},kt:function(){return f}});var a=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var c=a.createContext({}),s=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},h=function(t){var e=s(t.components);return a.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,c=t.parentName,h=l(t,["components","mdxType","originalType","parentName"]),p=s(n),f=i,d=p["".concat(c,".").concat(f)]||p[f]||u[f]||o;return n?a.createElement(d,r(r({ref:e},h),{},{components:n})):a.createElement(d,r({ref:e},h))}));function f(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,r=new Array(o);r[0]=p;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},99640:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},assets:function(){return h},toc:function(){return u},default:function(){return f}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=["components"],l={title:"Write GitHub Action: Checks and Annotations API (Part 2)",tags:["github","actions","automation","javascript"]},c=void 0,s={permalink:"/blog/2021/11/07/how-to-write-a-github-action-annotation-api",editUrl:"https://github.dev/tgrall/tgrall.github.io/blob/main/blog/2021-11-07-how-to-write-a-github-action-annotation-api.md",source:"@site/blog/2021-11-07-how-to-write-a-github-action-annotation-api.md",title:"Write GitHub Action: Checks and Annotations API (Part 2)",description:"In the first blog post of this series, I have explained how to create a custom GitHub Action that is interesting when you do not find the action that you need on the GitHub Marketplace.",date:"2021-11-07T00:00:00.000Z",formattedDate:"November 7, 2021",tags:[{label:"github",permalink:"/blog/tags/github"},{label:"actions",permalink:"/blog/tags/actions"},{label:"automation",permalink:"/blog/tags/automation"},{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:4.33,truncated:!0,authors:[],prevItem:{title:"Use private actions with your team",permalink:"/blog/2022/01/24/share-private-actions-enterprise"},nextItem:{title:"How to Write Custom GitHub Action (Part 1)",permalink:"/blog/2021/10/30/how-to-write-a-github-action"}},h={authorsImageUrls:[]},u=[{value:"Check if the <code>README.md</code> file starts with a title",id:"check-if-the-readmemd-file-starts-with-a-title",children:[{value:"Creating a new function to test the content of the <code>README.md</code> file",id:"creating-a-new-function-to-test-the-content-of-the-readmemd-file",children:[]},{value:"Calling the new function",id:"calling-the-new-function",children:[]}]},{value:"Creating a Check with Annotation",id:"creating-a-check-with-annotation",children:[]},{value:"Video",id:"video",children:[]}],p={toc:u};function f(t){var e=t.components,l=(0,i.Z)(t,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,l,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"/blog/2021/10/30/how-to-write-a-github-action"},"first blog post")," of this series, I have explained how to create a custom GitHub Action that is interesting when you do not find the action that you need on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/marketplace"},"GitHub Marketplace"),"."),(0,o.kt)("p",null,"I will now focus on some interesting API that you can use when building an action: ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/reference/checks#create-a-check-run"},"Checks")," & ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/reference/checks#update-a-check-run"},"Annotations"),"."),(0,o.kt)("p",null,"It is import, when a workflow is running to provide visual feedback to the user. This is where the checks and annotation API is handy as it allows you for example indicates to the user that a specific step has failed ( \u274c ) or was successfully ( \u2705 ) executed; and using the API it is also possible to create a detailed annotation that points to a specific line of code; this helping the user to understand what is going on in the workflow."),(0,o.kt)("p",null,"The following screenshot shows the annotation API in action:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Workflow Annotations",src:n(35536).Z})),(0,o.kt)("p",null,"\ud83d\udcd7 In this second post, you will learn how to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create custom Checks"),(0,o.kt)("li",{parentName:"ol"},"Add some detailed annotation with reference to source code (lines) with error"),(0,o.kt)("li",{parentName:"ol"},"Deploy the action")),(0,o.kt)("p",null,"If you prefer the video version of this post go to ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=NF7kqYowzLA"},"Github Actions: Create custom Checks and Annotations\n"),"."),(0,o.kt)("p",null,"It is time now to dive into the example!"),(0,o.kt)("p",null,"In this new example, you will simply add few lines of code to the action that you have created in the previous post. If you have not yet created the action, please refer to the previous post or take the source from the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tgrall/check-files-action/tree/v1.0.0"},"v1.0.0 release of the ",(0,o.kt)("inlineCode",{parentName:"a"},"tgrall/check-files-action")),"."),(0,o.kt)("p",null,"In the first version, the action simply use ",(0,o.kt)("inlineCode",{parentName:"p"},"core.info()")," to log a message or ",(0,o.kt)("inlineCode",{parentName:"p"},"core.setFailed()")," to raise an annotation. "),(0,o.kt)("p",null,"The goal now, is to check if the ",(0,o.kt)("inlineCode",{parentName:"p"},"README.md")," file starts with a title, and if not, raise create an annotation that point to the first line of the file. ",(0,o.kt)("em",{parentName:"p"},"(As mentioned in the previous post, I am not trying to create an action that you can reuse directly but use this to discover and learn the API related to Actions & Workflows)")),(0,o.kt)("h2",{id:"check-if-the-readmemd-file-starts-with-a-title"},"Check if the ",(0,o.kt)("inlineCode",{parentName:"h2"},"README.md")," file starts with a title"),(0,o.kt)("p",null,"So we need to add a new function in our action that check if the file starts with a title ",(0,o.kt)("em",{parentName:"p"},"(a markdown header using the ",(0,o.kt)("inlineCode",{parentName:"em"},"#")," character)"),"."),(0,o.kt)("h3",{id:"creating-a-new-function-to-test-the-content-of-the-readmemd-file"},"Creating a new function to test the content of the ",(0,o.kt)("inlineCode",{parentName:"h3"},"README.md")," file"),(0,o.kt)("p",null,"I have used GitHub Copilot to create a new function that read the file and chec if it starts with a title, inclusing a small regular expression to remove all empty lines. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{7,9}","{7,9}":!0},"// create a function that checks if the file starts with a markdown header\nasync function checkFileStartsWithHeader(filePath) {\n    return fs.promises.readFile(filePath, 'utf8')\n    .then(fileContent => {\n\n        // remove all empty lines ad the beginning of the file\n        fileContent = fileContent.replace(/^\\s*\\n/gm, '');\n\n        if (fileContent.startsWith('#')) {\n            core.info(`File ${filePath} starts with a header`);\n            return true;\n        } else {\n            core.setFailed(`File ${filePath} does not start with a header`);\n            return false;\n        }\n    });\n}\n\n")),(0,o.kt)("p",null,"This function receive the path to the file, open and read the content, then:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"on line 7, remove all the empty lines of the file using a regular expression generated by ",(0,o.kt)("a",{parentName:"li",href:"https://copilot.github.com"},"GitHub Copilot"),". ",(0,o.kt)("em",{parentName:"li"},"(See the video to view it in action; also I remove all the empty line for simplicity)")),(0,o.kt)("li",{parentName:"ul"},"on line 9, the function checks if the string start with a ",(0,o.kt)("inlineCode",{parentName:"li"},"#")," character. If it does, it returns true, otherwise it returns false.")),(0,o.kt)("p",null,"I kept the comments in the snippet to let you test ",(0,o.kt)("a",{parentName:"p",href:"https://copilot.github.com"},"GitHub Copilot")," if you have access to technical preview."),(0,o.kt)("h3",{id:"calling-the-new-function"},"Calling the new function"),(0,o.kt)("p",null,"Before testing the new version of the action, you must call this method from the main method of the action."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'...\n    checkFileStartsWithHeader("README.md");\n...\n')),(0,o.kt)("h2",{id:"creating-a-check-with-annotation"},"Creating a Check with Annotation"),(0,o.kt)("p",null,"Now that the aciton has been tested, I will create a new check and annotation. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{3,6-7,11-33}","{3,6-7,11-33}":!0},"    ...\n        if (\n            ! await checkFileStartsWithHeader(\"README.md\")\n        ) {\n            // get token for octokit\n            const token = core.getInput('repo-token');\n            const octokit = new github.getOctokit(token);\n\n\n            // call octokit to create a check with annotation and details\n            const check = await octokit.rest.checks.create({\n                owner: github.context.repo.owner,\n                repo: github.context.repo.repo,\n                name: 'Readme Validator',\n                head_sha: github.context.sha,\n                status: 'completed',\n                conclusion: 'failure',\n                output: {\n                    title: 'README.md must start with a title',\n                    summary: 'Please use markdown syntax to create a title',\n                    annotations: [\n                        {\n                            path: 'README.md',\n                            start_line: 1,\n                            end_line: 1,\n                            annotation_level: 'failure',\n                            message: 'README.md must start with a header',\n                            start_column: 1,\n                            end_column: 1\n                        }\n                    ]\n                }\n            });\n        }\n    ...\n           \n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"line 3: call the function to check if the file starts with a title, and if not, raise an annotation"),(0,o.kt)("li",{parentName:"ul"},"lines 6-7: get the token for octokit, this will allow the action to call the GitHub REST API (see line 11)"),(0,o.kt)("li",{parentName:"ul"},"line 11: call the GitHub REST API to create a check with annotation and details.")),(0,o.kt)("p",null,"This brief call is creating a new Check with an Annotation to point the user to the proper file and lines, as you can see below, the user is informed that the line 1 in ",(0,o.kt)("inlineCode",{parentName:"p"},"README.md")," should be a title."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Workflow Annotations",src:n(32730).Z})),(0,o.kt)("p",null,"The annotation objects are defined in the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/rest/reference/checks#update-a-check-run--parameters"},"GitHub API documentation"),"."),(0,o.kt)("h2",{id:"video"},"Video"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/NF7kqYowzLA",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}))}f.isMDXComponent=!0},35536:function(t,e,n){e.Z=n.p+"assets/images/004-annotations-fb2a1fce4c69c2a5a0fac8864f5d8adc.png"},32730:function(t,e,n){e.Z=n.p+"assets/images/005-annotations-result-4735a21faa12f44f18caa95529f094e7.png"}}]);