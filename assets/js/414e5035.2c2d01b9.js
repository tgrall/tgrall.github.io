"use strict";(self.webpackChunktgrall_blog=self.webpackChunktgrall_blog||[]).push([[53613],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),y=a,g=u["".concat(s,".").concat(y)]||u[y]||m[y]||o;return r?n.createElement(g,l(l({ref:t},p),{},{components:r})):n.createElement(g,l({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},73707:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={title:"Groovy 101: Extracting XML from your database",categories:"groovy"},l=void 0,i={permalink:"/blog/2007/02/20/groovy-101-extracting-xml-from-your-database",editUrl:"https://github.dev/tgrall/tgrall.github.io/blob/main/blog/2007-02-20-groovy-101-extracting-xml-from-your-database.md",source:"@site/blog/2007-02-20-groovy-101-extracting-xml-from-your-database.md",title:"Groovy 101: Extracting XML from your database",description:"In the previous entry I showed how you can easily take an XML feed and insert the content in the database. Let's do the opposite now, meaning taking the data out of your database as XML. In this post I am using the Sql Dataset again but to create an XML document, using the Groovy MarkupBuilder.",date:"2007-02-20T00:00:00.000Z",formattedDate:"February 20, 2007",tags:[],readingTime:.87,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Groovy 101: Extracting XML from your database",categories:"groovy"},prevItem:{title:"The first International Grails eXchange 2007",permalink:"/blog/2007/02/22/the-first-international-grails-exchange-2007"},nextItem:{title:"Groovy 101: Importing XML in your database",permalink:"/blog/2007/02/18/groovy-101-importing-xml-in-your-database"}},s={authorsImageUrls:[]},c=[],p={toc:c};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In the previous entry I showed how you can easily take an XML feed and insert the content in the database. Let's do the opposite now, meaning taking the data out of your database as XML. In this post I am using the Sql Dataset again but to create an XML document, using the Groovy MarkupBuilder."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-groovy"},'import groovy.sql.Sql;\nimport groovy.xml.MarkupBuilder;\n\ndef sql = Sql.newInstance("jdbc:oracle:thin:@//tgrall-linux:1521/XE",\n"HR", "HR", "oracle.jdbc.driver.OracleDriver")\ndef set = sql.dataSet("EMPLOYEES");\n\ndef writer = new StringWriter()\ndef xml = new MarkupBuilder(writer)\n\nxml.employees() {\n  set.each { emp ->\n    employee(first: emp.first_name , last: emp.last_name) {\n      email( emp.email )\n    }\n\n  }\n}\n\nprintln writer.toString();\n')),(0,a.kt)("p",null,"As you can see, I use the builder to create XML Elements and attributes employee(first: emp.first_name , last: emp.last_name), I do reference the current record of the dataset (emp), and all this in very simple and concise code.\nThis will give a result like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<employees>\n  <employee first="\'Steven\'" last="\'King\'">\n    <email>SKING</email>\n  </employee>\n  <employee first="\'Neena\'" last="\'Kochhar\'">\n    <email>NKOCHHAR</email>\n  </employee>\n  <employee first="\'Lex\'" last="\'De">\n    <email>LDEHAAN</email>\n  </employee>\n  ...\n</employees>\n')),(0,a.kt)("p",null,"So once again quite simple."))}m.isMDXComponent=!0}}]);